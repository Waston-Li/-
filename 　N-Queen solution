//
//  N-QUEEN.cpp

//  Created by 千里 on 17/3/23.
//  Copyright © 2017年 千里. All rights reserved.
//
//回溯法
#include <iostream>
#define N 8
int pos[N+1]={0};
using namespace std;
int check(int i);
void QUEEN(int row)   //回溯法
{
    while(row>=1)
    {
        pos[row]++;
        while(pos[row]<=N)
         if(check(row))
             break;
        else
            pos[row]++;
        
        if(row==N&&pos[row]<=N)
        {
            for(int j=1;j<=N;j++)
                cout<<pos[j]<<" ";
            cout<<endl;
            return ;        //一种解
        }
        if(row<N&&pos[row]<=N)
            row++;
        else
            pos[row--]=0;
        
   }
    
}
void dfs_QUEEN(int row)  //递归法
{
    
    if(row>N)
    {
        for(int j=1;j<=N;j++)
        cout<<pos[j]<<" ";
        cout<<endl;
        return ;
    }
    else
        for(int i=1;i<=N;i++)
        {
            pos[row]=i;
            if(check(row))
                dfs_QUEEN(row+1);
        }

}
int main()
{
    int i;
    cout<<"请选择解决方法：1-回溯，2-递归：";cin>>i;
    if(i==1)
       QUEEN(1);
    else
        dfs_QUEEN(1);
    return 0;
}
int check(int i)
{
    for(int j=1;j<i;j++)
    {
        if(abs(i-j)==abs(pos[i]-pos[j])||pos[i]==pos[j])
            return 0;
       
    }
    return 1;
};
